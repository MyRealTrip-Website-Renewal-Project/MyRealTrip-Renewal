import type { Meta, StoryObj } from '@storybook/react';
import { Tree, TreeNode } from './Tree';
import { Badge } from './Badge';

const meta: Meta<typeof Tree> = {
  title: 'UI/Tree',
  component: Tree,
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: 'Ìä∏Î¶¨ Ïª¥Ìè¨ÎÑåÌä∏ÏûÖÎãàÎã§. Í≥ÑÏ∏µÏ†Å Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌïòÎ©∞ ÎÖ∏Îìú ÏÑ†ÌÉù, ÌôïÏû•/Ï∂ïÏÜå, Ï≤¥ÌÅ¨Î∞ïÏä§, ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.'
      }
    }
  },
  argTypes: {
    size: {
      control: { type: 'select' },
      options: ['sm', 'md', 'lg'],
      description: 'Ìä∏Î¶¨ ÌÅ¨Í∏∞'
    },
    theme: {
      control: { type: 'select' },
      options: ['default', 'primary', 'success', 'warning', 'error'],
      description: 'Ìä∏Î¶¨ ÌÖåÎßà'
    },
    selectable: {
      control: 'boolean',
      description: 'ÎÖ∏Îìú ÏÑ†ÌÉù Í∞ÄÎä• Ïó¨Î∂Ä'
    },
    multiple: {
      control: 'boolean',
      description: 'Îã§Ï§ë ÏÑ†ÌÉù Í∞ÄÎä• Ïó¨Î∂Ä'
    },
    checkable: {
      control: 'boolean',
      description: 'Ï≤¥ÌÅ¨Î∞ïÏä§ ÌëúÏãú Ïó¨Î∂Ä'
    },
    draggable: {
      control: 'boolean',
      description: 'ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Í∞ÄÎä• Ïó¨Î∂Ä'
    }
  },
  decorators: [
    (Story) => (
      <div style={{ padding: '2rem', width: '100%', maxWidth: '600px' }}>
        <Story />
      </div>
    )
  ]
};

export default meta;
type Story = StoryObj<typeof meta>;

// ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
const sampleData: TreeNode[] = [
  {
    key: '1',
    title: 'ÌîÑÎ°úÏ†ùÌä∏',
    type: 'folder',
    icon: 'üìÅ',
    children: [
      {
        key: '1-1',
        title: 'ÌîÑÎ°†Ìä∏ÏóîÎìú',
        type: 'folder',
        icon: 'üìÅ',
        badge: 'New',
        children: [
          {
            key: '1-1-1',
            title: 'React',
            type: 'folder',
            icon: 'üìÅ',
            count: 5,
            children: [
              {
                key: '1-1-1-1',
                title: 'App.tsx',
                type: 'file',
                icon: 'üìÑ'
              },
              {
                key: '1-1-1-2',
                title: 'index.tsx',
                type: 'file',
                icon: 'üìÑ'
              }
            ]
          },
          {
            key: '1-1-2',
            title: 'TypeScript',
            type: 'folder',
            icon: 'üìÅ',
            count: 3,
            children: [
              {
                key: '1-1-2-1',
                title: 'types.ts',
                type: 'file',
                icon: 'üìÑ'
              }
            ]
          }
        ]
      },
      {
        key: '1-2',
        title: 'Î∞±ÏóîÎìú',
        type: 'folder',
        icon: 'üìÅ',
        children: [
          {
            key: '1-2-1',
            title: 'Node.js',
            type: 'folder',
            icon: 'üìÅ',
            children: [
              {
                key: '1-2-1-1',
                title: 'server.js',
                type: 'file',
                icon: 'üìÑ'
              }
            ]
          }
        ]
      }
    ]
  },
  {
    key: '2',
    title: 'Î¨∏ÏÑú',
    type: 'folder',
    icon: 'üìÅ',
    children: [
      {
        key: '2-1',
        title: 'README.md',
        type: 'file',
        icon: 'üìÑ'
      },
      {
        key: '2-2',
        title: 'API.md',
        type: 'file',
        icon: 'üìÑ'
      }
    ]
  }
];

// Ïï°ÏÖòÏù¥ ÏûàÎäî Îç∞Ïù¥ÌÑ∞
const dataWithActions: TreeNode[] = [
  {
    key: '1',
    title: 'ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨',
    type: 'folder',
    icon: 'üë•',
    actions: [
      {
        key: 'add',
        label: 'Ï∂îÍ∞Ä',
        type: 'primary',
        onClick: (node: TreeNode) => console.log('Ï∂îÍ∞Ä:', node)
      },
      {
        key: 'edit',
        label: 'ÏàòÏ†ï',
        onClick: (node: TreeNode) => console.log('ÏàòÏ†ï:', node)
      }
    ],
    children: [
      {
        key: '1-1',
        title: 'Í¥ÄÎ¶¨Ïûê',
        type: 'folder',
        icon: 'üë§',
        actions: [
          {
            key: 'delete',
            label: 'ÏÇ≠Ï†ú',
            type: 'danger',
            onClick: (node) => console.log('ÏÇ≠Ï†ú:', node)
          }
        ],
        children: [
          {
            key: '1-1-1',
            title: 'admin.json',
            type: 'file',
            icon: 'üìÑ'
          }
        ]
      }
    ]
  }
];

// Í∏∞Î≥∏ Ìä∏Î¶¨
export const Default: Story = {
  args: {
    data: sampleData
  }
};

// ÏÑ†ÌÉù Í∞ÄÎä•Ìïú Ìä∏Î¶¨
export const Selectable: Story = {
  args: {
    data: sampleData,
    selectable: true
  }
};

// Îã§Ï§ë ÏÑ†ÌÉù Í∞ÄÎä•Ìïú Ìä∏Î¶¨
export const MultipleSelect: Story = {
  args: {
    data: sampleData,
    selectable: true,
    multiple: true
  }
};

// Ï≤¥ÌÅ¨Î∞ïÏä§Í∞Ä ÏûàÎäî Ìä∏Î¶¨
export const Checkable: Story = {
  args: {
    data: sampleData,
    checkable: true
  }
};

// ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠Ïù¥ Í∞ÄÎä•Ìïú Ìä∏Î¶¨
export const Draggable: Story = {
  args: {
    data: sampleData,
    draggable: true,
    onDrop: (dragNode, dropNode, position) => {
      console.log('ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠:', { dragNode, dropNode, position });
    }
  }
};

// Ïï°ÏÖòÏù¥ ÏûàÎäî Ìä∏Î¶¨
export const WithActions: Story = {
  args: {
    data: dataWithActions,
    selectable: true
  }
};

// ÌÅ¨Í∏∞Î≥Ñ Ìä∏Î¶¨
export const Sizes: Story = {
  render: () => (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>
      <div>
        <h3>Small Size</h3>
        <Tree
          size="sm"
          data={sampleData.slice(0, 1)}
        />
      </div>
      <div>
        <h3>Medium Size (Default)</h3>
        <Tree
          data={sampleData.slice(0, 1)}
        />
      </div>
      <div>
        <h3>Large Size</h3>
        <Tree
          size="lg"
          data={sampleData.slice(0, 1)}
        />
      </div>
    </div>
  )
};

// ÌÖåÎßàÎ≥Ñ Ìä∏Î¶¨
export const Themes: Story = {
  render: () => (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>
      <div>
        <h3>Default Theme</h3>
        <Tree
          data={sampleData.slice(0, 1)}
        />
      </div>
      <div>
        <h3>Primary Theme</h3>
        <Tree
          theme="primary"
          data={sampleData.slice(0, 1)}
          selectable={true}
        />
      </div>
      <div>
        <h3>Success Theme</h3>
        <Tree
          theme="success"
          data={sampleData.slice(0, 1)}
          selectable={true}
        />
      </div>
      <div>
        <h3>Warning Theme</h3>
        <Tree
          theme="warning"
          data={sampleData.slice(0, 1)}
          selectable={true}
        />
      </div>
      <div>
        <h3>Error Theme</h3>
        <Tree
          theme="error"
          data={sampleData.slice(0, 1)}
          selectable={true}
        />
      </div>
    </div>
  )
};

// ÎπÑÌôúÏÑ±ÌôîÎêú ÎÖ∏ÎìúÍ∞Ä ÏûàÎäî Ìä∏Î¶¨
export const WithDisabledNodes: Story = {
  args: {
    data: [
      {
        key: '1',
        title: 'ÌôúÏÑ± ÎÖ∏Îìú',
        type: 'folder',
        icon: 'üìÅ',
        children: [
          {
            key: '1-1',
            title: 'ÎπÑÌôúÏÑ± ÎÖ∏Îìú',
            type: 'file',
            icon: 'üìÑ',
            disabled: true
          }
        ]
      }
    ],
    selectable: true
  }
};

// Í≤ÄÏÉâÏù¥ Í∞ÄÎä•Ìïú Ìä∏Î¶¨
export const WithSearch: Story = {
  args: {
    data: sampleData,
    searchValue: 'React',
    filterNode: (node, searchValue) => 
      node.title.toLowerCase().includes(searchValue.toLowerCase())
  }
};

// Î°úÎî© ÏÉÅÌÉú Ìä∏Î¶¨
export const Loading: Story = {
  args: {
    data: [],
    loading: true
  }
};

// Îπà ÏÉÅÌÉú Ìä∏Î¶¨
export const Empty: Story = {
  args: {
    data: [],
    emptyText: 'Ìè¥ÎçîÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏÉàÎ°úÏö¥ Ìè¥ÎçîÎ•º ÏÉùÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî.'
  }
};

// Î≥µÏû°Ìïú Ìä∏Î¶¨ (Î™®Îì† Í∏∞Îä• Ìè¨Ìï®)
export const Complex: Story = {
  args: {
    data: [
      {
        key: '1',
        title: 'ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏',
        type: 'folder',
        icon: 'üè†',
        badge: 'Main',
        count: 10,
        actions: [
          {
            key: 'add',
            label: 'Ï∂îÍ∞Ä',
            type: 'primary',
            onClick: (node) => console.log('Ï∂îÍ∞Ä:', node)
          }
        ],
        children: [
          {
            key: '1-1',
            title: 'Í∞úÎ∞ú ÌôòÍ≤Ω',
            type: 'folder',
            icon: '‚öôÔ∏è',
            count: 3,
            children: [
              {
                key: '1-1-1',
                title: 'package.json',
                type: 'file',
                icon: 'üì¶',
                actions: [
                  {
                    key: 'edit',
                    label: 'Ìé∏Ïßë',
                    onClick: (node) => console.log('Ìé∏Ïßë:', node)
                  },
                  {
                    key: 'delete',
                    label: 'ÏÇ≠Ï†ú',
                    type: 'danger',
                    onClick: (node) => console.log('ÏÇ≠Ï†ú:', node)
                  }
                ]
              },
              {
                key: '1-1-2',
                title: 'tsconfig.json',
                type: 'file',
                icon: '‚öôÔ∏è'
              }
            ]
          },
          {
            key: '1-2',
            title: 'ÏÜåÏä§ ÏΩîÎìú',
            type: 'folder',
            icon: 'üíª',
            count: 5,
            children: [
              {
                key: '1-2-1',
                title: 'Ïª¥Ìè¨ÎÑåÌä∏',
                type: 'folder',
                icon: 'üß©',
                children: [
                  {
                    key: '1-2-1-1',
                    title: 'Button.tsx',
                    type: 'file',
                    icon: 'üîò'
                  },
                  {
                    key: '1-2-1-2',
                    title: 'Input.tsx',
                    type: 'file',
                    icon: 'üìù'
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    selectable: true,
    multiple: true,
    checkable: true,
    draggable: true,
    onSelect: (selectedKeys, node) => console.log('ÏÑ†ÌÉù:', selectedKeys, node),
    onCheck: (checkedKeys, node) => console.log('Ï≤¥ÌÅ¨:', checkedKeys, node),
    onExpand: (expandedKeys, node) => console.log('ÌôïÏû•:', expandedKeys, node),
    onNodeClick: (node) => console.log('ÌÅ¥Î¶≠:', node),
    onNodeDoubleClick: (node) => console.log('ÎçîÎ∏îÌÅ¥Î¶≠:', node),
    onDrop: (dragNode, dropNode, position) => console.log('ÎìúÎ°≠:', { dragNode, dropNode, position })
  }
}; 